<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- 서블릿 컨테이너의 리스너 클래스로 ContextLoderListener를 정의한다. -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 서블릿 컨테이너의 contextClass 파라미터에 AnnotationConfigWebApplicationContext 클래스를 지정한다. -->
	<context-param>
		<param-name>contextClass</param-name>
		<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
	</context-param>

	<!-- 서블릿 컨테이너의 contextConfigLocation 파라미터에 작성한 설정클래스를 지정한다 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<!-- XML기반 설정용 -->
		<!-- <param-value>/WEB-INF/spring/root-context.xml</param-value> -->
		
		<!-- 자바기반 설정용 -->
		<param-value>com.lamazon.config.RootConfig</param-value>		
	</context-param>

	<!-- DispatcherServlet 클래스를 서블릿 컨테이너에 등록한다 -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		
		<init-param>
			<!-- 서블릿 contextClass 파라미터에 AnnotationConfigWebApplicationContext 클래스를 지정한다. -->
			<param-name>contextClass</param-name>
			<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
		</init-param>
		
		<init-param>
			<!-- 서블릿 contextConfigLocation 파라미터에 작성한 설정 클래스를 지정한다. -->
			<param-name>contextConfigLocation</param-name>
			
			<!-- XML기반 설정용 -->
			<!-- <param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value> -->
			<param-value>com.lamazon.config.WebMvcConfig</param-value>
		</init-param>
		
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 서블릿필터 -->
	<!-- 
	<filter>
	    <filter-name>authFilter</filter-name>
	    <filter-class>com.lamazon.filter.AuthFilter</filter-class>
	    <init-param>
	    	<param-name>mdcKey</param-name>
	    	<param-value>remoteIp</param-value>
	    </init-param>
	</filter>
	<filter-mapping>
		<filter-name>authFilter</filter-name>
    	<url-pattern>/*</url-pattern>
	</filter-mapping>
 	-->
 
	<!-- 
	Rest API에서 HTTP메서드 요청을 웹브라우저에서 GET, POST만 지원하는경우 2가지외에 PUT, DELETE등으로 요청할때 사용 
	-->
	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<page-encoding>UTF-8</page-encoding>
			<include-prelude>/WEB-INF/common_include.jsp</include-prelude> <!-- 모든 JSP에 인클루드 된다. -->
		</jsp-property-group>
	</jsp-config>

</web-app>
